##### Todos os hosts #####
- hosts: all
  become: true
  tasks:
    - name: Instalação de pacotes essenciais para todos os hosts
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - curl
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        - wget
        - snap
        - gnupg2
        - iptables
        - conntrack
    - name: Instalar kubectl via snap
      snap:
        name: kubectl
        state: present
        classic: yes
    - name: Instalar helm via snap
      snap:
        name: helm
        state: present
        classic: yes
#### Host Master #####
- hosts: master
  become: true
  vars:
    k3s_version: "v1.34.1+k3s1"
    chart_path: "{{ playbook_dir }}/charts/whoami"
  tasks:
    - name: Obter informações do usuário atual
      set_fact:
        user_home: "{{ ansible_user_dir }}"
        current_user: "{{ ansible_user_id }}"
    - name: Instalar biblioteca Python 'kubernetes'
      pip:
        name: kubernetes
        state: present
        executable: pip3
        extra_args: "--break-system-packages"
      become: yes
    - name: Instalar k3s server
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION={{ k3s_version }} K3S_KUBECONFIG_MODE=644 sh -s - server --cluster-init
      args:
        creates: /usr/local/bin/k3s
    - name: Ler token do master
      slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: node_token_encoded
    - name: Salvar token decodificado em variável
      set_fact:
        node_token: "{{ node_token_encoded.content | b64decode }}"
    - name: Obter kubeconfig do control plane
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ./kubeconfig
        flat: yes
    #### observabilidade
    - name: Adicionar repositórios de pacotes de observabilidade
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
      args:
        creates: "{{ ansible_user_dir }}/.cache/helm"
    #### Prometheus + Grafana ####
    - name: Instalar o Prometheus
      kubernetes.core.helm:
        name: prometheus
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: monitoring
        create_namespace: true
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        values:
          grafana:
            adminUser: admin
            adminPassword: admin123
    #### Loki + Promtail
    - name: Instalar o Loki + Promtail
      kubernetes.core.helm:
        name: loki
        chart_ref: grafana/loki-stack
        release_namespace: logging
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        create_namespace: yes
        values:
          promtail:
            enabled: true
    #### Cert Manager
    - name: Adicionar repositório Helm do cert-manager
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
        state: present
    - name: Instalar o cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        create_namespace: yes
        values:
          installCRDs: true
    #### ClusterIssuer
    - name: Criar ClusterIssuer para meu e-mail
      kubernetes.core.k8s:
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: carlosleosouza@gmail.com
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
                - http01:
                    ingress:
                      class: nginx
    #### Debugs e Deploy da aplicação WhoAmI ####
    - name: Debug - verificar caminhos dos arquivos
      debug:
        msg:
          - "playbook_dir: {{ playbook_dir }}"
          - "Caminho do chart: {{ chart_path }}"
    #### Verificsr se a chart existe ####
    - name: Verificar se chart existe
      stat:
        path: "{{ chart_path }}/Chart.yaml"
      register: chart_check
      delegate_to: localhost
    #### Mostrar resultado da existência da chart ####
    - name: Mostrar resultado
      debug:
        var: chart_check
    #### Listar conteúdo do diretório de charts ####
    - name: Listar conteúdo do diretório charts
      shell: ls -la {{ chart_path}}
      register: charts_content
      delegate_to: localhost
    - name: Mostrar conteúdo
      debug:
        var: charts_content.stdout_lines
    #### Remover release existente ####
    - name: Remover release existente
      kubernetes.core.helm:
        name: whoami
        release_namespace: apps
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: absent
      ignore_errors: yes
    #### Deploy da aplicação WhoAmI ####
    - name: Deploy da aplicação WhoAmI
      kubernetes.core.helm:
        name: whoami
        chart_ref: "{{ chart_path}}"
        release_namespace: apps
        create_namespace: yes
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        force: yes
        replace: yes # Força substituição de recursos
        wait: yes
        atomic: yes # Faz rollback se falhar
        values:
          image:
            tag: "latest"
          ingress:
            host: whoami.local
            tls:
              enabled: true
          forceRedeploy: "{{ ansible_date_time.iso8601 }}"
##### Host Workers #####
- hosts: workers
  become: true
  tasks:
    - name: Copiar token do master para worker
      copy:
        content: "{{ hostvars[groups['master'][0]].node_token }}"
        dest: /tmp/k3s_token
        mode: 0600
    - name: Instalar k3s agent
      shell: |
        TOKEN=$(cat /tmp/k3s_token)
        curl -sfL https://get.k3s.io | K3S_URL="https://{{ hostvars[groups['master'][0]].ansible_host }}:6443" K3S_TOKEN="$TOKEN" sh -
      args:
        creates: /usr/local/bin/k3s
- hosts: master
  become: true
  tasks:
    - name: Checar se o cluster está funcionando
      shell: KUBECONFIG=/etc/rancher/k3s/k3s.yaml kubectl get nodes
      register: result
      failed_when: "'Ready' not in result.stdout"
      changed_when: false
      retries: 10
      delay: 10
      until: result.rc == 0
